package com.example.adx.controller;

import java.util.List;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import com.example.adx.entity.OrderEntity;
import com.example.adx.repository.OrderRepository;
import com.example.adx.service.OrderService;

@RestController  
@CrossOrigin
@RequestMapping(path="/adapter") // This means URL's start with /adapter (after Application path)
public class OrderController {
	@Autowired //  auto-generated by Spring, we will use it to handle the data
	private OrderRepository orderRepository;
	
	@Autowired
	private OrderService orderService;
	
	
	@RequestMapping(value= "/createorder", method = RequestMethod.POST)
	public ResponseEntity<String> createOrder (@RequestBody OrderEntity order){
		String msg;
		try {
			msg = orderService.createOrder(order);
			return new ResponseEntity<String> (msg, HttpStatus.OK);
		} catch (Exception e) {
//			e.printStackTrace();
			return new ResponseEntity<String> (e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		
	}
	

	@RequestMapping(value= "/updateorder", method = RequestMethod.PUT)
	public ResponseEntity<String> updateOrder(@RequestBody OrderEntity order) {
		String msg;
		try {
			msg = orderService.updateOrder(order);
			return new ResponseEntity<String> (msg, HttpStatus.OK);		
		} catch (Exception e) {
//			e.printStackTrace();
			return new ResponseEntity<String> (e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value= "/getallorders", method = RequestMethod.GET)
	public ResponseEntity<List<OrderEntity>> getAllOrders() {
		return new ResponseEntity<List<OrderEntity>>(orderRepository.findAll(), HttpStatus.OK);
	}
	
	@RequestMapping(value="/getorder/{orderId}", method = RequestMethod.GET)
	public ResponseEntity<?> getOrder (@PathVariable Integer orderId) throws Exception {
		
		try {
			OrderEntity order = orderService.getorder(orderId);
			return new ResponseEntity<OrderEntity>(order, HttpStatus.OK);
		} catch (Exception e) {
			String error = e.getMessage();
//			e.printStackTrace();
			return new ResponseEntity<String>(error, HttpStatus.BAD_REQUEST);
		}
	}
	
	@RequestMapping(value="/deleteorder/{accountId}", method = RequestMethod.DELETE)
	public ResponseEntity<String> deleteOrder(@PathVariable Integer accountId) throws Exception{
		// This returns a JSON or XML with the users
		String msg;
		try {
			msg = orderService.deleteOrder(accountId);
			return new ResponseEntity<String>(msg , HttpStatus.OK);
		} catch (Exception e) {
//			e.printStackTrace();
			return new ResponseEntity<String> (e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
}